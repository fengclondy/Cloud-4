<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.2.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.2.xsd 
            http://www.springframework.org/schema/task     
    		http://www.springframework.org/schema/task/spring-task-4.0.xsd ">

	<!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
	<context:component-scan base-package="com.ssitcloud.business"></context:component-scan>

	<!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射 -->
	<mvc:annotation-driven />
	
	<!-- 开启切面编程功能 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 防止返回jsp页面时候被拦截 -->
	<mvc:default-servlet-handler />

	<!-- 读取jdbc,config配置文件,读取多个配置文件需要加上ignore-unresolvable="true",如果有相同的字段，以第一个扫描到的为准-->
	<context:property-placeholder location="classpath:config.properties" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
	<context:property-placeholder location="classpath:tracker.properties" ignore-unresolvable="true"/>
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		连接池中保留的最小连接数。
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		连接池中保留的最大连接数。Default: 15
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		每60秒检查所有连接池中的空闲连接。Default: 0
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		定义在从数据库获取新连接失败后重复尝试的次数。Default: 30
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean> -->
	
	<!-- Hikari Datasource -->  
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"  destroy-method="shutdown">  
		 <property name="driverClassName" value="${jdbc.driverClass}" /> 
		 <property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		 <property name="username" value="${jdbc.user}" />
		 <property name="password" value="${jdbc.password}" />
		 
		  <!-- 连接只读数据库时配置为true， 保证安全 -->  
		 <property name="readOnly" value="false" />  
		 <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->  
		 <property name="connectionTimeout" value="30000" />  
		 <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->  
		 <property name="idleTimeout" value="600000" />  
		 <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） -->  
		 <property name="maxLifetime" value="1800000" />  
		 <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->  
		 <property name="maximumPoolSize" value="${jdbc.maxPoolSize}" />  
	</bean>
	
	<!-- 使用spring的事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 创建sessionFactory -->
	<bean id="sqlSessionFactory"     class="org.mybatis.spring.SqlSessionFactoryBean"   >
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>
    
    <!--配置事务service层事务不需要每层service都标注解了 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
<!-- 			*表示匹配任意方法名，add*：匹配add开头的方法 -->
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	 <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>    <!-- 拦截的url,不要用/**否则静态文件请求也会拦截 -->
<!-- 		不拦截的url,解析头spring-mvc-3.2.xsd要3.2版本以上，
			且<mvc:exclude-mapping/>要写在所有的 <mvc:mapping/>之后， 否则启动报错 -->
			<mvc:exclude-mapping path="/js/**"/>  
			<mvc:exclude-mapping path="/bootstrap**/**"/>  
			<bean class="com.ssitcloud.business.common.interceptor.GlobalInterceptor"></bean>
		</mvc:interceptor>
		 <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 --> 
	</mvc:interceptors>
	
<!-- 	<mvc:resources location="/bootstrap-3.3.5-dist/" mapping="/bootstrap**"/> -->
<!-- 	<mvc:resources location="/js/" mapping="/js/**"/> -->
	
	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <property name="defaultEncoding" value="UTF-8"/>  
        <!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->  
        <!-- <property name="maxUploadSize" value="200000"/>   -->
    </bean> 
	
	<!-- 容器启动时调用方法 -->
	<bean class="com.ssitcloud.business.common.interceptor.InitSystem" /> 
	<bean class="com.ssitcloud.business.common.system.BeanFactoryHelper" /> 
	<bean class="com.ssitcloud.business.common.system.ApplicationContextHolder" /> 
	
	<!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<!-- <property name="prefix" value="/"/> -->
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 定时任务 -->
	<bean id="sendHearbeat" class="com.ssitcloud.business.common.util.SendHearbeatUtil" />  
     <task:scheduled-tasks>
    	<!--cron表达式：*(秒0-59) *(分钟0-59) *(小时0-23) *(日期1-31) *(月份1-12或是JAN-DEC) *(星期1-7或是SUN-SAT)  --> 
        <!--<task:scheduled ref="sendHearbeat" method="sendData" cron="0/30 * * * * ?" /> --> 
        <task:scheduled ref="sendHearbeat" method="sendData"  initial-delay="3000" fixed-delay="60000" />
    </task:scheduled-tasks>
    
    <bean id="automaticSwitchServer" class="com.ssitcloud.business.common.system.AutomaticSwitchServerTask" />
    <!-- <task:scheduled-tasks>
    	cron表达式：*(秒0-59) *(分钟0-59) *(小时0-23) *(日期1-31) *(月份1-12或是JAN-DEC) *(星期1-7或是SUN-SAT) 
        <task:scheduled ref="automaticSwitchServer" method="switchServer"  initial-delay="30000" fixed-delay="1800000" />
    </task:scheduled-tasks>  -->

	<!--fastdfs-->
	<bean id="pooledConnectionFactory" class="com.github.tobato.fastdfs.conn.PooledConnectionFactory">
		<property name="charsetName" value="UTF-8"/>
		<property name="connectTimeout" value="${fdfs.connectTimeout}"/>
		<property name="soTimeout" value="${fdfs.soTimeout}"/>
  	</bean>
	<bean id="connectionPoolConfig" class="com.github.tobato.fastdfs.conn.ConnectionPoolConfig">
		<property name="maxTotal" value="${fdfs.pool.max}"/>
		<property name="maxWaitMillis" value="${fdfs.wait}"/>
  	</bean>

	<bean id="fdfsConnectionPool" class="com.github.tobato.fastdfs.conn.FdfsConnectionPool">
		<constructor-arg name="factory" ref="pooledConnectionFactory"/>
		<constructor-arg name="config" ref="connectionPoolConfig"/>
	</bean>

	<bean id="trackerConnectionManager" class="com.github.tobato.fastdfs.conn.TrackerConnectionManager">
		<property name="pool" ref="fdfsConnectionPool"/>
		<property name="trackerList" value="${fdfs.trackerLists}"/>
	</bean>
	<bean id="trackerClient" class="com.github.tobato.fastdfs.service.DefaultTrackerClient" >
	</bean>
	<bean id="fastFileStorageClient" class="com.github.tobato.fastdfs.service.DefaultGenerateStorageClient">
		<property name="trackerClientService" ref="trackerClient"/>
		<property name="connectionManager" ref="trackerConnectionManager"/>
	</bean>

	<bean id="generateStorageClient" class="com.github.tobato.fastdfs.service.DefaultGenerateStorageClient">
		<property name="connectionManager" ref="trackerConnectionManager"/>
		<property name="trackerClientService" ref="trackerClient"/>
	</bean>
</beans>
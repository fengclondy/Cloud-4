<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.2.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.2.xsd
            http://www.springframework.org/schema/task     
    		http://www.springframework.org/schema/task/spring-task-4.0.xsd ">
    <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
	<context:component-scan base-package="com.ssitcloud"></context:component-scan>

	<context:property-placeholder file-encoding="UTF-8" location="classpath:jdbc.properties" ignore-unresolvable="true"/>
	
	<!-- 数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
		<!-- <property name="acquireRetryDelay" value="100"></property> -->
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
     <bean id="p6dataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg ref="dataSource"/>
	</bean>
	<!-- 使用spring的事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="p6dataSource"></property>
	</bean>
	
	<!-- 创建sessionFactory -->
	<bean id="sqlSessionFactory"  class="org.mybatis.spring.SqlSessionFactoryBean"   >
        <property name="dataSource" ref="p6dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>
    
    <!--配置事务service层事务不需要每层service都标注解了 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
<!-- 			*表示匹配任意方法名，add*：匹配add开头的方法 -->
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>
    
    <bean id="beanFactoryHelper" class="com.ssitcloud.common.factory.BeanFactoryHelper">
    </bean>

	<!-- 会话Cookie模板 -->  
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
	    <constructor-arg value="sid"/>  
	    <property name="httpOnly" value="true"/>  
	    <property name="maxAge" value="-1"/>  
	</bean>  
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
	    <constructor-arg value="rememberMe"/>  
	    <property name="httpOnly" value="true"/>  
	    <property name="maxAge" value="2592000"/><!-- 30天 -->  
	</bean>
	<!-- rememberMe管理器 -->  
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">  
	    <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>  
	     <property name="cookie" ref="rememberMeCookie"/>  
	</bean>   
	<!--Session配置-->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
	    <property name="globalSessionTimeout" value="3600000"/>
		<property name="deleteInvalidSessions" value="true"/>
	    <property name="sessionValidationSchedulerEnabled" value="true"/>
	    <!-- <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>  -->
	    <!-- <property name="sessionDAO" ref="sessionDAO"/> -->
	    <property name="sessionIdCookieEnabled" value="true"/>
	    <property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>
	<!-- 配置权限管理器 -->  
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">    
        <!-- ref对应我们写的realm  MyShiro -->  
        <property name="realm" ref="myShiro"/>    
        <!-- 使用下面配置的缓存管理器 -->  
        <property name="cacheManager" ref="cacheManager"/> 
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="sessionManager" ref="sessionManager"></property> 
    </bean>  
     <bean id="myShiro" class="com.ssitcloud.common.system.MyShiro"/>
     
    <!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 -->  
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">   
        <!-- 调用我们配置的权限管理器 -->   
        <property name="securityManager" ref="securityManager"/>   
        <!-- 配置我们的登录请求地址 -->   
        <property name="loginUrl" value="/index.html"/>    
        <!-- 配置我们在登录页登录成功后的跳转地址，如果你访问的是非/login地址，则跳到您访问的地址 -->  
        <property name="successUrl" value="/page/main.jsp"/>    
        <!-- 如果您请求的资源不再您的权限范围，则跳转到/403请求地址 -->  
        <property name="unauthorizedUrl" value="/page/error/403.html"/> 
        <property name="filters">
        	<map>
        		<entry key="authc">
        			<!--  <bean class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        				<property name="rememberMeParam" value="rememberMe"/> 
        			</bean> -->
        			 <bean class="com.ssitcloud.common.system.MyAuthenticationFilter"></bean>
        		</entry>
        		<entry key="roles">
        			<bean class="com.ssitcloud.common.system.RoleAuthorizationFilter"></bean>
        		</entry>
        	</map>
        </property>
        <!-- <property name="filterChainDefinitionMap" ref="chainDefinitionSectionMetaSource" /> -->  
        <property name="filterChainDefinitions">  
            <value>
	        	/login/logincheck=anon
	        	/static/**=anon
	            /login = authc
	            /page/main.jsp=anon
	            /bookcode/**=anon
	            /logout = logout
	            /order/getLocations=anon
	            /order/controlShelf=anon
	            /order/shelfReset=anon
	            /bookitem/opacQueryBookitem=anon
	            /opac/index=anon
	           <!-- 所有的请求(除去配置的静态资源请求或请求地址为anon的请求)都要通过登录验证,如果未登录则跳到/login -->       
                /** = authc
                
	        </value>
        </property>  
    </bean>  
      
      
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />    
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />  
    
   <!--  <bean id="scheduledConfig" class="com.ssitcloud.common.system.ScheduledConfig"/>
	时间单位为毫秒
	<task:scheduled-tasks>
		一分钟一次
		<task:scheduled ref="scheduledConfig" method="exportReaderInfoFromSqlServerDB" initial-delay="10000" fixed-delay="60000"/>
	</task:scheduled-tasks>  
	 -->
	 
    <bean id="scheduledSendStateToRabbit" class="com.ssitcloud.common.system.ScheduledSendStateToRabbit"/>
    <bean id="scheduledRedisBookitem" class="com.ssitcloud.common.system.ScheduledRedisBookitem"/>
	<!-- 时间单位为毫秒 -->
	<!-- <task:scheduled-tasks> -->
		<!-- 一分钟一次 -->
		<!-- <task:scheduled ref="scheduledSendStateToRabbit" method="send" initial-delay="10000" fixed-delay="60000"/> -->
		<!-- <task:scheduled ref="scheduledRedisBookitem" method="send" initial-delay="10000" fixed-delay="60000"/> -->
	<!-- </task:scheduled-tasks>   -->
	
</beans>